{"posts":[{"title":"화성행, 달행 티켓!!!","text":"설명나사에서 화성행, 달행 티켓을 발부했습니다!설명으로는 나사의 다음 화성행, 달행 우주선에 넣은 이름이 간다고 합니다!(사실 시작한지는 꽤 됬는데 옛날에 했다가 이번에 제가 보는 유튭채널에 나와서 ㅎㅎ) 화성행 티켓https://mars.nasa.gov/participate/send-your-name/mars2020/ 위의 나사 공식 사이트에 들어가서 신청하면 됩니다. 완성된 티켓은 이미지로 다운로드할 수도, 웹사이트 Embed 형식으로도 만들 수 있습니다.들어간 페이지의 링크를 복사하면 링크 채로 공유할 수 있습니다.https://mars.nasa.gov/participate/send-your-name/future/certificate/540363187942 (이름이 비어있는 이유는 성으로 고앵이를 넣었고 이름부분에는 공백문자를 넣었습니다.) 달행 티켓https://www.nasa.gov/send-your-name-with-artemis/#user-information FIRST NAME, LAST NAME: 성, 이름이고 PIN CODE는 4~7자리 숫자 코드달행 티켓은 링크로 찾을 수 없기 때문에 PIN CODE는 나중에 다시 계정을 찾기 위해 정해줍니다. (실재 사용하는 비밀번호는 추천하지 않습니다.) 이렇게 지정해 주고 SUBMIT을 누르거나 Enter를 누르면 다음과 같은 티켓이 생성되고 이미지를 클릭하면 다운로드할 수 있습니다. 마무리이상으로 화성행, 달행 티켓!!! 포스팅을 마치겠습니다. 🎈이 포스팅은 모바일랩님의이제 우주다! 화성 갈끄니까~ 달도 갈끄니까~! 우주 여행 무료!! 영상을 보고 쓴 글입니다. 내용이 비슷하거나 같을 수 있습니다.옛날에 우주에 한창 관심이 있을때 한번 신청했는데 오랜만에 다시보니 감회가 새롭군요.","link":"/mars&moon-ticket/"},{"title":"깃헙 블로그 시작","text":"블로그 소개일단 주요 포스팅은 마인크래프트 리소스팩 입니다.그 외에도 파이썬, HTML 등 코딩도 할 예정 블로그를 하는 이유는 내가 배운거 메모(?)하는 목적 다른사람이 보고 배워가면 해서 말투(?) 가 왔다 갔다 할 수 있습니다.(존댓말, 반말 등) 완전히 생초보를 위한 블로그인 동시에 필자 또한 생초보이기 때문에 매우 매우 쉽게 설명하고 있습니다. 시작글을 마치며귀찮아서 자주 포스팅 못 할수도 있다는아무튼 잘 생각날때마다 포스팅 하겠습니다.","link":"/Blog/blog-start/"},{"title":"특수기호만으로 JavaScript 코드 짜기","text":"출처 이 글은 해외 유튜버 Low Level Javascript의 영상을 가져다 번역해 쓴 글임을 알려드립니다. 또한 NomadCoder님의 타입스크립트 영상을 참고했습니다. 링크 서론일단 들어가기에 앞서 사람들이 자바스크립트가 이상하다고 말하는 이유는 정말 많다.그중 가장 대표적인 이유는 Type Coercion이라는 기능 때문인데, 이는 JavaScript가 서로 다른 타입끼리도 더하려고 하는 기능이다. 원래 프로그래밍 언어는 타입이 다르면 에러가 나야 하는데, 이걸 계산하려고 하는 바람에 오히려 이상해진다. 예를 들자면 12&gt; 1 + true&lt; 2 true 를 숫자로 계산하려 1로 만들어 버립니다. 12&gt; ('b' + 'a' + + 'a' + 'a').toLowerCase()&lt; 'banana' +'a'를 숫자로 바꿔 더할 수 없으므로 NaN으로 바뀌는데, 이게 또 문자열이 되서 &quot;nan&quot;가 됩니다. 1234&gt; 2 + '2' + 2&lt; '222'&gt; 2 + '2' - 2&lt; 20 마지막에 +2냐 -2냐에 따라서 문자열과 정수가 되는 마☆법 아무튼 이렇게 에러마저 문자열로 취급되는등… 본론이제 특수문자 ({[/&gt;+!-=\\]}) 만 가지고서 코딩을 해봅시다. 개념기본적으로 자바스크립트에서 다른 타입을 더하면 어떻게 되는지 알아봅시다. 문자열에 숫자를 더하면 문자열이 됩니다. 123String + Number = String&gt; 'a' + 0&lt; 'a0' 불타입에 숫자를 더하면 숫자가 됩니다.true면 1, false면 0이 됩니다. 123Boolean + Number = Number&gt; true + 0&lt; 1 이걸 이용해 다음과 같은 식을 계산해 봅시다. 12&gt; +[]&lt; 0 []은 boolean타입으로 false입니다. 근데 앞에 아무것도 없이 +를 했으므로 0이 됩니다. 구현이제 본격적으로 시작해보죠. ({[/&gt;+!-=\\]}) 만을 위해 코딩을 하기 위해 모든 글자를 ({[/&amp;gt;+!-=\\]})만 이용해 표현해 봅시다. 먼저 index.js를 만듭니다 ❗ .ts확장자를 사용하면 안 됩니다. 이건 .js의 이상한 점을 사용했기 때문에 TS를 사용하면 에러가 납니다. 숫자 정의하기먼저 0을 정의합니다. index.js1const zero = '+[]'; ![]가 false가 되므로 !![]는 true가 됩니다.앞에서 본 것처럼 앞에 +를 붙이면 숫자로 만들 수가 있습니다. index.js1const one = '+!![]'; 물론 이렇게 계속 반복하면 모든 숫자를 만들 수 있겠지만 개발자는 반복을 싫어하므로 함수를 만듭시다. 그리고 n이 0이 되면 아무것도 없어지므로 n이 0일때를 따로 추가해 줍시다. index.js1234const number = (n) =&gt; { if (n === 0) return zero; //n이 0일때 return Array.from({ length: n }, () =&gt; one).join(' + ');}; 12number(7)&lt; '+!![] + +!![] + +!![] + +!![] + +!![] + +!![] + +!![]' 이런식으로 표현식이 나옵니다. 문자열 정의하기먼저 문자열은 JavaScript에 있는 기본 기능으로 fromCharCode() 이라는 함수로 Ascii 값을 변환 시킬 수 있습니다.이외에도 각종 방법을 쓰기위해 우리는 1fromChadetSingcsup[space][backslash] 라는 기본적인 글자들을 구현해야 합니다. 먼저 글자들을 저장하기 위해 map이라는 Object를 만듭시다. index.js1const map = {}; a 구현NaN이라는 것은 숫자가 아닌것을 숫자로 만드려 할때 나옵니다.+{}을 이용해 NaN을 얻어내고 +[]을 이용해 문자열로 만들 수 있습니다. 여기서 NaN에서 2번째, index 1 의 a를 얻어낼 수 있습니다.여기서 직접적 숫자를 쓸 수 없으므로 앞에 만들어두었던 number()함수를 사용합시다. index.js12// +{}+[] = 'NaN'map.a = `(+{} +[])[${number(1)}]` b,o,e,c,t,[space] 구현하기{}를 +{}를 붙여 문자열로 만들면 [object Object]라는 값이 나옵니다. 여기서 b,o,e,c,t,[space]를 얻을 수 있습니다. index.js1234567// {}+[] = '[object Object]'map.b = `({}+[])[${number(2)}]`;map.o = `({}+[])[${number(1)}]`;map.e = `({}+[])[${number(4)}]`;map.c = `({}+[])[${number(5)}]`;map.t = `({}+[])[${number(6)}]`;map[' '] = `({}+[])[${number(7)}]`; // [space]를 map. 뒤에 쓸 수 없으므로 key값을 이용해 값을 정한다. f,s,r,u 구현하기![]+[]는 'false'이고 !![]+[]는 'true'입니다. 여기서 f,s,r,u를 얻을 수 있습니다. index.js1234map.f = `(![]+[])[${number(0)}]`;map.s = `(![]+[])[${number(3)}]`;map.r = `(!![]+[])[${number(1)}]`;map.u = `(!![]+[])[${number(2)}]`; i,n 구현하기원래 수학에서는 안되지만 JavaScript에서는 되는 계산이 있습니다.바로 0 으로 나누는것 입니다.JavaScript에서는 0이 아닌수를 0으로 나누면 Infinity 즉 무한을 얻습니다.1의 값을 가지고있는 +!![]을 0의 값을 가지고 있는+[]으로 나누면 Infinity가 나옵니다.동일한 방법으로 문자열 'Infinity'로 만들면 i,n을 얻을 수 있습니다. index.js12map.i = `((+!![]/+[])+[])[${number(3)}]`;map.n = `((+!![]/+[])+[])[${number(1)}]`; S,g,p 구현하기 😵여기서부터 조금 어지러워집니다. 먼저 여태 구현한 글자들을 불러올때 하나하나 불러오겠습니다. 그런데 map.a, map.b 이런것을 반복하는것은 반복 작업입니다. 그러므로 함수를 만들겠습니다. index.js123const fromString = s =&gt; { return s.split('').map(x =&gt; map[x]).join('+') // 문자열을 받아 각각의 문자를 `map`에서 찾아 조합합니다.} JavaScript에서는 모든게 Object 입니다. 단지 console.log()할때 다르게 나오는 것일 뿐 모든 자료에 . 을 붙이고 하위 함수나 변수를 불러올 수 있습니다.그러므로 String에서도 기본적 String 함수인 constructor를 불러올 수 있습니다. 여태 구현한 문자열을 살펴보면 constructor를 쓸 수 있습니다. 1`([]+[])[${fromString('constructor')}]` 를 실행시키면 다음과 같은 결과가 나옵니다 result >folded1'([]+[])[({}+[])[+!![] + +!![] + +!![] + +!![] + +!![]]+({}+[])[+!![]]+((+!![]/+[])+[])[+!![]]+(![]+[])[+!![] + +!![] + +!![]]+({}+[])[+!![] + +!![] + +!![] + +!![] + +!![] + +!![]]+(!![]+[])[+!![]]+(!![]+[])[+!![] + +!![]]+({}+[])[+!![] + +!![] + +!![] + +!![] + +!![]]+({}+[])[+!![] + +!![] + +!![] + +!![] + +!![] + +!![]]+({}+[])[+!![]]+(!![]+[])[+!![]]]' 앞뒤 '를 없에고 실행해보면 다음처럼 나옵니다. 1ƒ String() { [native code] } 이걸 +[]를 더해 문자열로 만들면 'ƒ String() { [native code] }'이 나옵니다. 여기서 S,g를 구현할 수 있습니다. index.js12map.S = `([]+([]+[])[${fromString('constructor')}])[${number(9)}]`;map.g = `([]+([]+[])[${fromString('constructor')}])[${number(14)}]`; 같은 방법으로 Regex(정규 표현식)의 constructor를 불러오면 ƒ RegExp() { [native code] }가 나오고 +[]를 더해 문자열로 만들면 'ƒ RegExp() { [native code] }'가 나와 p를 구현할 수 있습니다. index.js1map.p = `([]+(/-/)[${fromString('constructor')}])[${number(14)}]`; ‘\\‘ 구현하기\\는 특수문자이기 때문에 \\\\로 써야 하고 일반 문자열 속에 넣으려면 다시 두 배가 되므로정규 표현식을 사용해서 /\\\\\\\\/로 정하고 +[]를 붙여 문자열로 만들어주면 \\를 구현할 수 있다. index.js1map['\\\\'] = `(/\\\\\\\\/+[])[${number(1)}]`; d,h,m 구현하기여태 얻은 문자들로 toString()이라는 함수를 부를 수 있는데, toString()에는 10진수, 12진수, 16진수 등 진수를 바꿔 인코딩 할 수 있습니다. 즉, 숫자를 글자로 바꿀 수 있습니다. 예를 들어 13을 14진수로 인코스 하면 d가 나옵니다. 이런 식으로 d,h,m 을 구현할 수 있습니다. index.js123map.d = `(${number(13)})[${fromString('toString')}](${number(14)})`;map.h = `(${number(17)})[${fromString('toString')}](${number(18)})`;map.m = `(${number(22)})[${fromString('toString')}](${number(23)})`; C 구현하기 이건 꽤 어려운 개념이라 저자도 조금 햇갈립니다. 먼저 JavaScript는 함수도 오브젝트이기 때문에 함수에서 constructor를 불러올 수 있습니다. 거기서 escape라는 함수를 또 불러올 수 있는데, 그 함수에 \\를 넣어주면 &quot;% 5C&quot;라는 문자열이 나옵니다(\\의 아스키 값으로 보입니다.) 여기서 index 2의 C를 구현할 수 있습니다 index.js123map.C = `(()=&gt;{})[${fromString('constructor')}](${fromString( 'return escape')})()(${map['\\\\']})[${number(2)}]`; fromString() 함수 발전시키기만약 들어온 글자가 map에 없다면 글자의 Ascii코드를 얻고 문자열 constructor에서 fromCharCode라는 함수를 불러와 Ascii코드를 넣고 알맞은 글자를 얻을 수 있습니다. index.js1234567891011121314const fromString = (s) =&gt; { return s .split('') .map((x) =&gt; { if (!(x in map)) { const charCode = x.charCodeAt(0); return `([]+[])[${fromString('constructor')}][${fromString( 'fromCharCode' )}](${number(charCode)})`; } return map[x]; }) .join('+');}; (새로 만드는 함수가 아니라 기존 함수를 변경합니다.) 컴파일러 만들기이제 여태 만든 변환기(?)를 실제로 작동하도록 만듭시다. index.js123const compile = (code) =&gt; { return `(()=&gt;{})[${fromString('constructor')}](${fromString(code)})()`;}; 함수 constructor를 불러온 후 인자로 받은 code를 특수문자로 변환, 즉각 실행시킵니다. 궁극의 코드index.js >folded12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152const zero = '+[]';const one = '+!![]';const number = (n) =&gt; { if (n === 0) return zero; return Array.from({ length: n }, () =&gt; one).join(' + ');};const map = {};const fromString = (s) =&gt; { return s .split('') .map((x) =&gt; { if (!(x in map)) { const charCode = x.charCodeAt(0); return `([]+[])[${fromString('constructor')}][${fromString( 'fromCharCode' )}](${number(charCode)})`; } return map[x]; }) .join('+');};map.a = `(+{}+[])[${number(1)}]`;map.b = `({}+[])[${number(2)}]`;map.o = `({}+[])[${number(1)}]`;map.e = `({}+[])[${number(4)}]`;map.c = `({}+[])[${number(5)}]`;map.t = `({}+[])[${number(6)}]`;map[' '] = `({}+[])[${number(7)}]`;map.f = `(![]+[])[${number(0)}]`;map.s = `(![]+[])[${number(3)}]`;map.r = `(!![]+[])[${number(1)}]`;map.u = `(!![]+[])[${number(2)}]`;map.i = `((+!![]/+[])+[])[${number(3)}]`;map.n = `((+!![]/+[])+[])[${number(1)}]`;map.S = `([]+([]+[])[${fromString('constructor')}])[${number(9)}]`;map.g = `([]+([]+[])[${fromString('constructor')}])[${number(14)}]`;map.p = `([]+(/-/)[${fromString('constructor')}])[${number(14)}]`;map['\\\\'] = `(/\\\\\\\\/+[])[${number(1)}]`;map.d = `(${number(13)})[${fromString('toString')}](${number(14)})`;map.h = `(${number(17)})[${fromString('toString')}](${number(18)})`;map.m = `(${number(22)})[${fromString('toString')}](${number(23)})`;map.C = `(()=&gt;{})[${fromString('constructor')}](${fromString( 'return escape')})()(${map['\\\\']})[${number(2)}]`;const compile = (code) =&gt; { return `(()=&gt;{})[${fromString('constructor')}](${fromString(code)})()`;}; 이제 다음과 같이 compile함수에 코드를 인자로 넣으면 특수문자 코드를 반환합니다. 1console.log(compile('console.log(&quot;Hello, World!&quot;);')); 터미널에 다음과 같이 넣으면 파일로 만들어 집니다. 1$ node index.js &gt; helloworld.js 그대로 브라우저 console 에 실행시켜보면.. Hello, World! 외전외전으로 compiler로 compiler를 컴파일해봅시다. 실행하면… Recursive!! 마무리긴글 읽어주셔서 감사합니다!!이상으로 특수기호만으로 JavaScript 코드 짜기 포스팅을 마치겠습니다.","link":"/JavaScript/javascript-is-weird/"},{"title":"자바스크립트 while 문과 for 문","text":"while 문123456let i = 0; //i 를 설정한다.while (i &lt; 100) { //앞의 i &lt; 100 값이 true(참)인동안 반복된다. i++; //i 값에 1을 더한다. console.log(i); //i 값을 출력한다.} 위의 코드는 i의 값이 100 초과인동안 반복되고 매 반복마다 콘솔에 i값을 출력한후 i에다가 1씩 더한다. 위에서 말했듯 while 문은 () 내부에 있는 조건의 값이 true(참)인 동안 반복 된다. ❗ 참인동안 반복이고 거짓이 되는순간 반복이 끝난다. 맨날 까먹어서 저도 고생했어요 😭 ❗ 만약 조건 부분이 절대 끝나지 않도록 설정한다면 브라우저가 폭8 할 테니까 절대로 하지 말 것!! for 문1234for (let i = 0; i &lt; 100; i++) { //초기값을 설정한다. console.log(i); //i 값을 출력한다.} for 문은 i 변수값과 조건문, 매번 반복이 끝날때마다 실행할 코드를 설정할 수 있어서 좋다. for 문은 while문을 훨신 간편히 쓸 수 있다. 거의 for문을 쓴다. ✨물론 무조건 for 문을 쓰라는것은 아닙니다. while 문을 쓰는것이 좋을때도 물론 있습니다. 위의 코드는 i의 값이 100 초과인동안 반복되고 매 반복마다 i에다가 1씩 더한후 콘솔에 i값을 출력한다. 정리이런 면에서 for 문과 while 문의 차이점은 거의 없습니다. 하지만 쓰임새가 다를 수 있으므로 잘 구분해서 써주시길! 표현한다면 이런느낌..? 마무리이상으로 자바스크립트 while 문과 for 문 포스팅을 마치겠습니다. 📌 이 포스팅은 ZeroCho 님의 렛츠기릿 자바스크립트로 배우고 만들었습니다. 비슷한 부분이 있을 수 있습니다.🎈강의 링크","link":"/JavaScript/while-for/"},{"title":"개발 폰트에 관한 고찰","text":"들어가면서저는 디자인에 관심이 많았고 요즈음은 자주 만들지는 않지만 리소스팩도 만들었고 꿈도 웹 디자이너로 선택하게 되었습니다.개발할 때 쓰는 폰트로 자주 바꾸는 편이고 관심도 많습니다. 여태 써온 폰트들도 10가지가 넘습니다.이번 포스트에 그 폰트들에 관한 고찰을 해보려 합니다. 무료 폰트만 다룰 것입니다. 폰트에까지 돈을 쓰고 싶지는 않기 때문! 폰트 마다의 개성이 있고 개인 취향이 있기 때문에 장단점은 얘기하지 않겠습니다. 이후 포스트에서도 한 폰트를 파고드는 등 폰트에 관한 포스트도 많이 만들 것입니다. 🅰 개발 폰트란? - 다른 폰트와의 차이점말 그대로 개발할 때 쓰는 폰트입니다. 고정폭 - Monospace고정폭 폰트인 Monospace 타입의 폰트로서 읽기 편하게 폰트마다 폭이 다른 가변폭 폰트와 달리 모든 글자의 폭이 동일합니다. 구분 - Distinguishable비슷하게 표현되는 I(대문자 i), l(소문자 L), |(앤터 위에 쉬프트 누르고 치면 나오는거)등 여려가지를 구분하기 쉽게 해줍니다. (이 블로그에는 영어 폰트가 개발 폰트로 적용되어 있기에 구별 가능합니다.) 합자 - Ligatureligature은 &lt;-- 같은 문자들이 자동으로 이어져 화살표가 되는 것 같은 기능을 말합니다. 물론 이미지 외에도 == 를 이어주기도 하고 &lt;= 를 ≤ 로 바꿔주기도 합니다. 🗯 내가 그동안 사용한 폰트들 Consolas JetBrains Mono Fira Code D2Coding NeoDunggeunmo Code Dina Inconsolata Hack Roboto Mono Comic Mono Consolasconsolas는 윈도우에 기본으로 설치되어 있는 폰트입니다.그리고 개발 폰트적 측면에서도 꽤나 좋은 폰트죠. 물론 기본 설치 폰트기 때문에 ligature는 지원하지 않습니다.특별한 꾸밈이 없기에 뭔가 더 매력적인 느낌입니다. 윈도우즈에 기본 설치되어 있기 때문에 따로 다운로드 링크는 없습니다. 이유는 알 수 없지만 뭘 쓰던지 다시 Consolas로 돌아오는 매력이 있습니다. JetBrains Monohttps://www.jetbrains.com/lp/mono/ JetBrains Mono는 제가 처음으로 써본 개발 폰트입니다. VSCode를 몰랐을 때 PyCharm을 사용했을 때 PyCharm의 기본 폰트인 JetBrains Mono를 알게 되었습니다.이 폰트 또한 필자가 높게 평가하는 폰트 중 하나입니다. IntelliJ IDEA, PyCharm, Kotlin등을 개발한 JetBrains에서 개발한 폰트입니다.정말 많은 ligature를 지원합니다. 세로로 높아지는 느낌이 강합니다. 깔끔함을 좋아하는 필자에게는 정말 좋은 폰트입니다. Fira Codehttps://github.com/tonsky/FiraCode 정말 많은 사람들이 쓰는 폰트입니다.읽을 사람에게 특화되어 대문자 사이에 들어간 : 위치를 높이는 등 가독성 끝판왕 폰트입니다. 물론 좋은 폰트지만 필자에게는 그다지 끌리는 폰트는 아니었습니다.하지만 ligature떄문에 익숙해 지려고 가끔 써보고 있습니다. 특이 사항으로는 r이 많이 꺾여 있습니다. JetBrains Mono 같이 많은 ligature를 지원합니다. Iosevkahttps://typeof.net/Iosevka/ 정말 특이한 폰트입니다. 새로로 긴 폰트 중 정말 마음에 드는 폰트입니다. 사용할떄 눈이 편해지는 느낌이랄까? 읽기 어렵다고 하는 사람들도 있지만 필자에게는 마음이 편해지는 폰트였습니다. 공식 사이트에서 커스터마이징을 할 수 있어서 자신만의 폰트를 만들 수 있다는 특이한 점이 있습니다. 단지 커스터마이징 하려면 터미널에서 직접 빌드 해야합니다. D2Codinghttps://github.com/naver/d2codingfont 네이버에서 개발한 폰트입니다. 한국 회사가 만들었기 때문에 한글도 지원한다는 것이 큰 특징입니다. ligature 버전이 따로 있습니다. 나눔 고딕을 기반으로 한 개발 폰트로, 큰 특징은 없지만 그래도 consolas처럼 매력이 있습니다. NeoDunggeunmo Codehttps://neodgm.dalgona.dev/neodgm_code.html NeoDunggeunmo Code는 Neo둥근모를 개발 폰트로 만든 것입니다.한국 개발자 Dalgona님이 만들어서 한글을 지원합니다. 물론 ligature도 지원 합니다. 거의 유일한 배포된 비트맵 폰트로, 각진 글자들이 매력적입니다. Dinahttps://www.dcmembers.com/jibsen/download/61/ 이 폰트 또한 앞서 소개한 폰트 같은 비트맵 폰트입니다.그러나 폰트 크기가 너무 작고 비트맵 형식으로 된 폰트이기 때문에 VSCode에서 쓸 수 없어 Notepad++같은 서브 에디터에서만 썼던 기억이 있네요. Inconsolatahttps://levien.com/type/myfonts/inconsolata.htmlhttps://fonts.google.com/specimen/Inconsolata Inconsolata는 뭔가 가녀린? 부드러운듯한 느낌을 줍니다.t나 y등의 밑 꼬리 부분이 휘어져 있는 게 특징입니다.v, w의 대각선 부분도 미세하게 휘어져 있습니다. 사용할때 이것또한 눈이 편해지는 느낌 입니다. Hackhttps://sourcefoundry.org/hack/ 딱히 설명할 필요도 없는 폰트입니다.ligature를 지원하지 않아도 쓸 이유가 충분이 될 정도로 깔끔합니다.깔끔함 그것 하나로 필자의 마음을 사로잡았습니다. Roboto Monohttps://fonts.google.com/specimen/Roboto+Mono Rotobo Mono는 구글에서 개발한 폰트입니다. 필자가 써본 결과 읽기는 편하지만 코드를 작성할 때 그다지 편하지는 않았습니다. 사이트나 이미지에서 읽어야 할 때 쓰기 좋은 폰트입니다. Comic Monohttps://dtinth.github.io/comic-mono-font/ Comic Mono는 세계 최고의 폰트인 Comic Sans를 개발 폰트로 만든 것입니다.사실 이 폰트는 공식적 개발 폰트라고 보기는 어렵고 장난으로 만든 폰트입니다. 만약 진짜로 Comic Sans로 만든 폰트를 사용하고 싶다면 일본인 폰트 디자이너인 Toshi Omagari의 유료 폰트인 Comic Code를 사용하세요. 마무리이상으로 개발 폰트에 관한 고찰 포스팅을 마치겠습니다. 이번 포스트는 필자의 개인적인 의견을 담고있습니디.","link":"/design/font/"},{"title":"I WANNA MAKER toggle 구현하기","text":"들어가면서…자! 새로운 시리즈 입니다. I WANNA BE THE GUY, I Wanna Be The Boshy등의 게임 맵을 직접 디자인 할 수 있는 게임 입니다. 인지도가 그렇게 높지는 않지만 레벨이 16만 개 정도이고 하는 사람은 많지 않지만 썩은물이 넘쳐나는 게임입니다. 스팀에서 무료로 배포하고 있습니다. 링크: https://store.steampowered.com/app/1114940/ 이미지 출처 I WANNA MAKER 스팀 페이지 toggle 이란?toggle(토글)이란 두 값이 있을 때 스위치를 한번 누르면 한 값이 되고, 다시 한번 누르면 다른 값으로 변하는 것이다.대표적으로 checkbox이다. 아래처럼 말이다. 만들기I WANNA MAKER 에디터에 관한 기초적인 지식은 알고있어야 한다. (추후에 포스팅 예정) 1. 오브젝트 트리거 설치하기트리거를 오브젝트 트리거를 아래와 같이 설치한다. 따로 이벤트를 넣을 필요는 없다. 첫번째 트리거 넘버를 A, 두번째 트리거 넘버를 B, 새번째 트리거 넘버를 C 라고 하자. 2. 회로 블럭 설치하기.아무 블럭(떨어지거나 상호작용이 가능한 블럭은 별로 추천하지 않는다.)을 설치한다. 3. 이벤트 넣기2.에서 설치한 블럭에 이벤트를 넣는다. 무엇을 하면 toggle이 작동될지 아까 정한 C 아까 정한 B 아까 정한 A 상태 1 때 무엇을 할지 (trigger 추천) 상태 2 때 무엇을 할지 (trigger 추천) ㄱ 의 경로와 ㄴ 의 경로를 다음과 같이 수정한다. 사용 블럭 이벤트는 다음과 같습니다. 마무리이상으로 I WANNA MAKER toggle 구현하기 포스팅을 마치겠습니다. 자신만의 toggle 방법이 있다면 댓글에 남겨주세요!","link":"/iwm/toggle/"},{"title":"Lua 기초 설정","text":"소개Lua는 파이썬이나 자바스크립트 같은 인터프리터 언어입니다.Lua의 문법이 파이썬처럼 영어로 읽어도 이해가 될정도로 쉽게 설계되어있습니다. Lua는 간단한 프로그램, PixelVision8같은 게임 콘솔, Rainmeter같은 여러 커스터마이징이 가능한 프로그램에서도 사용됩니다.또 LÖVE2D같은 게임 엔진에도 이용됩니다. 코딩을 할때 나오는 다음과 같은 문장 있죠? 1234if 조건문 then 실행할 문장 1 실행할 문장 2 실행할 문장 3 이렇게 나오는데, 실제 Lua 코드는 12345if 조건문 then 실행할 문장 1 실행할 문장 2 실행할 문장 3end 위와같이 조건문이나 문이 끝날때 end를 붙이면 됩니다. 설치Lua는 다른 파이썬같은 언어같이 인터프리터가 필요합니다. ❗이 강좌는 Windows 10 운영체제 기준입니다. 다운로드먼저 Lua 페이지에서 최신 윈도우 파일을 받아줍시다. Lua 다운로드 페이지,https://luabinaries.sourceforge.net/download.html 저는 64 비트 운영체제이기 때문에 🧱lua-5.4.2_Win64_bin.zip 을 받아줍시다. ✔저자가 쓰는 시점에는 Lua의 최신 버전이 5.4.2 이므로 해당 버전을 받았지만 더 최신버전이 나왔다면 그걸 받으시면 됩니다. 파일의 압축을 풀어서 자신이 원하는 경로에 위치해줍시다.이때 Downloads같은 비울 일이 생기는 폴더는 추천드리지 않습니다.(웬만하면 C:\\lua에 푸는것을 추천합니다.) 환경 변수 설정환경 변수는 System Environment 라고도 하죠.환경 변수에 설정한 폴더 내에있는 파일들은 해당 경로에 들어가지 않고도 사용할 수 있습니다. Win키를 눌러서 자신의 운영체제 언어가 한국어라면 고급 시스템 설정 보기를 검색하고영어라면 system environment를 검색합니다. Environment Variables...를 누릅니다.(한국어면 환경 변수) 🎉언어가 달라도 버튼의 위치는 항상 같으니 걍 누릅시다 ㅎ Path를 누르고 Edit...을 누르거나 Path를 더블 클릭하면 아래와 같은 창이 나옵니다. New를 누르고 자신의 Lua 경로를 넣어줍니다.모두 OK를 누르면 설치가 끝났습니다. VSCode 설정언어 설치Lua를 설치해 주세요. 설치 링크Install Lua Language VSCode Marketplace 링크VSCode Market Place Lua Lua 실행 설정Lua 프로젝트의 🚀Root에 📁.vscode라는 폴더를 만듭니다.그안에 📝task.json을 만듭니다. .vscode/task.json123456789101112131415{ &quot;version&quot;: &quot;2.0.0&quot;, &quot;tasks&quot;: [ { &quot;label&quot;: &quot;Run Lua&quot;, &quot;type&quot;: &quot;shell&quot;, &quot;command&quot;: &quot;c:/lua/lua54.exe&quot;, &quot;args&quot;: [&quot;${file}&quot;], &quot;group&quot;: { &quot;kind&quot;: &quot;build&quot;, &quot;isDefault&quot;: true } } ]} 7행에 command는 자신이 Lua 프로그램의 위치를 써주면 됩니다.물론 아까 Path를 설정했지만 오류가 날 수 도 있기 때문에 이렇게 해주는 것이 좋습니다. 마무리이렇게 Lua 스크립트를 사용해볼 준비를 마쳤습니다.다음 포스팅에서는 Lua 스크립트를 사용해 보겠습니다.이상으로 Lua 기초 설정 포스팅을 마치겠습니다.","link":"/lua/setup/"},{"title":"첫 Lua 스크립트 실행시켜보기","text":"루아 인터프리터로 사용해보기Lua는 파이썬처럼 인터프리터 대화형 셸로 사용할 수 있습니다. 저번 회차에서 설치한 lua폴더로 가서 🥞lua54.exe(54가 아니라 다른이름일 수도 있음)를 실행시킨다 또는 cmd를 열어서 lua54를 치는 방법도 있습니다. 열고나면 대화형 셸이 나오는데 여기에 다음과 같이 써봅시다. 12&gt; print('hello, world!')hello, world! 그럼 hello, world! 라고 출력될 겁니다. 🎉축하합니다! 당신은 첫 Lua코드를 실행시켰습니다! 루아 파일로 실행시키기이제 Lua를 파일로 실행 시켜봅시다. 다음과 같은 파일을 프로젝트 폴더에 생성합니다. helloworld.lua1print('hello, world!') 그리고 ctrl+Shift+B 를 누른다.그럼 실행이 될 것입니다. 마무리다음 글에서는 Lua 자료형을 정리하겠습니다.이상으로 첫 Lua 스크립트 실행시켜보기 포스팅을 마치겠습니다.","link":"/lua/start/"},{"title":"안카이드님의 비공개 리팩","text":"다운로드설명 없어요. 영상으로 대체 다운로드 따라 만든겁니다. 배포 허가 받았습니다. 안카님 팩도 원래 EUM3 라는 리팩 수정 팩입니다.(갑옷 모양 바꾸는거 까먹었는데 곧 고칠거) 어… Ankaid님이 유튭을 접었네요..? 상관없습니다… 리팩을 만들었다는걸로 만족합니다…(공식팩 샀는데) 마무리이상으로 안카이드님의 비공개 리팩 포스팅을 마치겠습니다.","link":"/pack/ankaid-private/"},{"title":"마인크래프트 기본 리소스팩","text":"마인크래프트 리소스팩 을 만들려면 일단 베이스가 되는 기본 리소스팩이 있어야합니다. 이때 마인크래프트 기본 리소스팩을 얻는 방법에는 두가지가 있습니다. 다운받기 추출하기 마인크래프트 폴더로 가기 압축 풀기 pack.mcmeta 파일 만들기 마무리 다운받기먼저 다운받는 법이 있습니다. 다운로드제가 직접 추출한거니 안심하셔도 됩니다.만약 다운로드 파일이 의심스럽다면 #추출하기하시면 됩니다. 추출하기추출하는법은 조금 복잡합니다.먼저 추출을 원하는 마인크래프트 버전을 한번 켯다가 꺼주세요. 마인크래프트 폴더로 가기그후 마인크래프트 폴더로 가 줍시다.Win+R 을 눌러 다음 경로를 넣습니다. %appdata%\\.minecraft또는C:\\Users\\&lt;유저네임&gt;\\AppData\\Roaming\\.minecraft 입니다. 압축 풀기마인크래프트 폴더내에 📂version 이라는 폴더가 있습니다.📂version 폴더 안에 자신이 원하는 버전 이름인 폴더를 열면,그안에 📄&lt;자신이원하는 버전&gt;.jar 파일이 있을겁니다.이 파일을 실행하지말고 압축 파일 프로그램으로 연후 assets 폴더만 선택해서 압축 해제 해 주세요. pack.mcmeta 파일 만들기그후 assets 폴더를 Default Resourcepack 으로 이름지은 폴더에 넣고 같은 폴더에 pack.mcmeta 를 생성합니다.(확장자를 보이게 한뒤 .txt 파일 생성후 이름을 바꾼다.)pack.mcmeta 의 내용은 이러합니다. pack.mcmeta123456{ &quot;pack&quot;: { &quot;pack_format&quot;: 1, &quot;description&quot;: &quot;Default Resourcepack&quot; }} 여기서 &quot;pack_format&quot; 부분은 팩을 쓸 수 있는 마인크래프트의 버전입니다. 숫자 버전 1 1.6.1 – 1.8.9 2 1.9 – 1.10.2 3 1.11 – 1.12.2 4 1.13 – 1.14.4 5 1.15 – 1.16.1 6 1.16.2 – 1.16.5 7 1.17+ 또 &quot;description&quot; 부분은 팩의 설명 입니다. 일단은 &quot;Default resourcepack&quot; 으로 써놓으세요. 나중에 팩을 만들때 바꾸면 됩니다. 마무리이상으로 마인크래프트 기본 리소스팩 포스팅을 마치겠습니다.","link":"/pack/default/"},{"title":"리소스팩 만들때 준비물","text":"📝텍스트 에디터 - 노트패드++노트패드++ 는 심플하면서도 기능이 좋은 에디터 입니다.무료이며 매우 추천함노트패드 공식 다운로드 페이지이미지 원본 : 노트패드++ 홈페이지 🎨이미지 편집 툴 - PaintDotNet페인트닷넷은 무료 포토샵으로 많이 알려져있을만큼 성능이 좋습니다.역시 무료, 매우 만족하며 쓰는중Paint.net 공식 다운로드 페이지 paint.net 외에는 GIMP를 추천합니다.만약 아무 설치나 다운로드 없이 쓰고싶다면 윈도우 기본 프로그램인 Paint 3D를 사용할 수 있습니다.이미지 원본 : PaintDotNet 홈페이지 🖼이미지 보는 툴 - EMULSIONEMULSION (뭐라고 읽는지 모르겠다) 은 다른 이미지 툴과는 다르게 확대를 해도 이미지가 흐려지지 않습니다. 그 외에도 이미지 편집같은 추가기능이 없어서 매우 가볍습니다.EMULSION 공식 다운로드 페이지(다른 프로그램을 쓰고싶다면 프로그램 설정에서 antialiasing (한국어로 뭔지 모르겠다) 을 끄시면 됩니다.)이미지 원본 : EMULSION 홈페이지 마무리이상으로 리소스팩 만들때 준비물 포스팅을 마치겠습니다.읽어주셔서 감사합니다.","link":"/pack/needs/"},{"title":"하이픽셀 픽셀 파티 리소스팩","text":"설명하이픽셀에 새로 추가된 게임 “Pixel Party”특정 색의 블럭을 제외하고 땅이 없어지는 게임이다.(어디선가 본것 같은 느낌은 기분탓이다. ㅎ)근데.. 블럭 색의 구분이 불가하다…근데 하픽이 잘못 만든게 아니다. 마크의 텍스처 팀이 잘못 한거다. 기본 리소스팩의 문제점 왼쪽이 회색(Gray) 오른쪽이 검정(Black) 인데… 구분을 못하겠는데요…?검정은 갈색이고… 물론 저렇게 써놓으면 알아볼 수 있지만 만약에 인겜이면 못알아 봅니다 ㄹㅇ 왼쪽이 하늘색(Light Blue) 가운데가 파란색(Blue) 오른쪽이 시안(Cyan) (시안은 청록색 비슷한거) 이건 무슨… 마젠타(Magenta)(자주색) 핑크(Pink) 빨강(Red) 주황(Orange) 이건 그나마 구분 할만 한데 마젠타가 마젠타가 아녀 ㅋㅋ 이거 말고도 많지만 일단 여기까지 리소스팩 달라진점전과 다르게 확실히 구분 됩니다. 다운로드ctm(connected texture method)를 넣으려면 넣을 수 있지만 굳이 안넣음 ㅎctm 넣어서 만들었다면 공유좀(만들기 귀찮 ㅎ) 다운로드 마무리이상으로 하이픽셀 픽셀 파티 리소스팩 포스팅을 마치겠습니다.이번 포스팅은 하픽에서 겜하다가 제가 불편해서 만들었습니다.","link":"/pack/pixel-party/"},{"title":"파이썬 포매팅","text":"문자열 포매팅의 쓸모먼저 글자를 출력하는 예를 봅시다. 바나나가 1개가 있다.바나나가 2개가 있다. 여기서 바뀐 점은 1과 2뿐입니다. 이 두 문자열을 프린팅을 할 때 두 문자열을 모두 출력하려면 다음과 같은 코드가 필요합니다. 12print(&quot;바나나가 1개가 있다.&quot;)print(&quot;바나나가 2개가 있다.&quot;) 지금은 겨우 2개라서 별로 그래 보이지 않지만 생활 코딩님이 그러셨습니다.코딩을 할 때는 극단적으로 생각하라고. 같은 항목이 1억 개가 있다고 생각하세요. 그렇다면 1234567print(&quot;바나나가 1개가 있다.&quot;)print(&quot;바나나가 2개가 있다.&quot;)print(&quot;바나나가 3개가 있다.&quot;)print(&quot;바나나가 4개가 있다.&quot;)... 이렇게 1억줄의 코드를 쓰기에는 시간이 너무 아깝지 않나요?이때 포매팅을 쓸 수 있습니다. 포매팅의 방법먼저 문자열 포매팅의 다양한 사용법을 알아보자. 1 . C 방식 사용하기12&gt;&gt;&gt; print(&quot;바나나가 %d개가 있다.&quot; % 1)'바나나가 1개가 있다.' 다음 코드에서 문자열 뒤에 붙인 % 1 이 문자열 안 %d의 위치에 들어간 것이다. 12&gt;&gt;&gt; print(&quot;바나나가 %d개가 있다.&quot; % 1)'바나나가 1개가 있다.' 다음처럼 변수를 넣을 수도 있다. 123&gt;&gt;&gt; banana = 1&gt;&gt;&gt; &quot;바나나가 %d개가 있다.&quot; % banana'바나나가 1개가 있다.' 만약 두 개 이상의 값을 포매팅 해야 한다면 % 1을 % (1, 2, 3) 등으로 ()괄호 안에 넣어서 표현할 수 있습니다. 만약 문자열 속에 &quot;%&quot; 글자를 넣고 싶다면 &quot;%%&quot;를 사용해야 한다. 이렇게 말이다. 12&gt;&gt;&gt; &quot;%d%% 세일!!&quot; % 80&quot;80% 세일!!&quot; 문자열 포맷 코드 코드 설명 %s 문자열(String) %c 문자 1개(Character) %d 정수(Integer) %f 부동소수(Floating Point) %o 8진수(Octal) %x 16진수(Hexadecimal(hex)) %% 문자 “%” 포맷 코드와 숫자 함께 사용하기개인적으로 이 부분은 거의 쓰지않는다;; 정렬다음과 같이 %&lt;숫자&gt;s를 넣으면 &lt;숫자&gt; 만큼의 공백(“ “)의 속에 포맷을 한 값을 공백 뒤에 넣는다. 12&gt;&gt;&gt; &quot;%15s&quot; % &quot;nyan&quot;' nyan' 다음과같이 코드를 짠다면 12&gt;&gt;&gt; &quot;%-15s&quot; % &quot;nyan&quot;'nyan ' 다음과같이 앞에 포맷값이 들어간다. 소수점 표현다음과같이 %&lt;숫자1&gt;.&lt;숫자2&gt;f를 넣으면 &lt;숫자1&gt; 은 공백 정렬과 같은 효과, &lt;숫자2&gt;는 소수점 아래 &lt;숫자2&gt;까지 나올 숫자의 개수를 말한다. 12345&gt;&gt;&gt; &quot;%0.6f&quot; % 3.14159265358979323846264'3.141592'&gt;&gt;&gt; &quot;%15.6f&quot; % 3.14159265358979323846264' 3.141592' 2 . format 함수를 이용 방식 사용하기(파이썬 방식)format 함수 방식은 앞에나온 C 방식보다 더 쉽고 나은 방식이다. 12&gt;&gt;&gt; &quot;바나나가 {0}개가 있다.&quot;.format(1)'바나나가 1개가 있다.' {0} 부분이 .fotmat() 에 나오는 인덱스 값이다. {0}에 .format(1, 2, 3)에서 0번째인 1을 넣는다. 만약 두개이상의 값을 넣을려면 당연하게도 문자열에 {0}외에도 {1}, {2}등을 넣어주면 된다. 값을 대입할때 변수로 넣기다음과같이 인덱스를 넣을때 변수에 넣을 수 있다. 12&gt;&gt;&gt; &quot;바나나가 {banana}개가 있다.&quot;.format(banana=1)'바나나가 1개가 있다.' 정렬12&gt;&gt;&gt; &quot;{0:&lt;10}&quot;.format(&quot;nyan&quot;)'nyan ' :&lt;[숫자]를 사용하면 포맷된 값을 [숫자]만큼 공백(“ “)의 왼쪽에 삽입한다. 12&gt;&gt;&gt; &quot;{0:&gt;10}&quot;.format(&quot;nyan&quot;)'nyan ' :&gt;[숫자]를 사용하면 포맷된 값을 [숫자]만큼 공백(“ “)의 오른쪽에 삽입한다. 12&gt;&gt;&gt; &quot;{0:^10}&quot;.format(&quot;nyan&quot;)'nyan ' :^[숫자]를 사용하면 포맷된 값을 [숫자]만큼 공백(“ “)의 가운데에 삽입한다. 공백을 값으로 채우기12&gt;&gt;&gt; &quot;{0:-&lt;10}&quot;.format(&quot;nyan&quot;)'nyan------' :[문자][기호][숫자]를 사용하면 공백(“ “) 대신 문자가 채우게 된다. 소수점 표현다음과같이 %&lt;숫자1&gt;.&lt;숫자2&gt;f를 넣으면 &lt;숫자1&gt; 은 공백 정렬과 같은 효과, &lt;숫자2&gt;는 소수점 아래 &lt;숫자2&gt;까지 나올 숫자의 개수를 말한다. 12&gt;&gt;&gt; &quot;{0:0.6f}&quot;.format(3.14159265358979323846264)' 3.141592' 3. f 포메팅 문자 사용하기저자는 방식을 가장 많이 사용한다 123&gt;&gt;&gt; banana = 1&gt;&gt;&gt; f'바나나가 {banana}개가 있다.''바나나가 1개가 있다.' 또는 12&gt;&gt;&gt; f'바나나가 {1}개가 있다.''바나나가 1개가 있다.' 이처럼 문자열 앞에 f를 붙여주고 포메팅 할 부분에 {}를 넣고 그 안에 값을 넣는 방식으로 가장 심플하고 쉽게 쓸 수 있다. 문자열 앞에 f를 붙여준다는점을 제외하고는 앞의 format() 함수 사용과 별차이점이 없기때문에 따로 설명하지는 않겠다. &quot;{&quot;, &quot;}&quot; 문자 사용하기&quot;{&quot;, &quot;}&quot;문자를 사용할때는 &quot;{{\", \"}}&quot;를 사용하면 된다. 마무리이상으로 파이썬 문자열 포메팅 포스팅을 마치겠습니다. 📌 이 포스팅은 박응용 님의 DOIT! 점프투 파이썬을 보고 배우고 만들었습니다. 비슷한 부분이 있을 수 있습니다.🎈 강의 링크","link":"/python/formatting/"},{"title":"파이썬 선택 시스템","text":"미리보기 이런식으로 선택지 중 하나를 선택해서 키보드를 누르면 Enter를 누를필요 없이 즉시 가능합니다. 만들기코드 Gist 링크 pyselect.py1234567891011121314151617181920212223242526272829303132333435363738import msvcrtdef select(text, option): string = '' for x in text: string += f'{x}\\n' option_text = '' choice = '' for x in range(0, len(option)-1): option_text += f'\\n({option[x][0]}) {option[x][1]}\\n' choice += f'{option[x][0]}' input_text = f'\\nselect[{choice}]&gt; ' print('\\n'+string, option_text, input_text, end='') while True: try: key = msvcrt.getch().decode() if key != '0': if key in list(choice): print(key) return key else: pass except: passif __name__ == &quot;__main__&quot;: text = ['text 1', 'text 2', 'text 3'] option = [['y', 'banana-1'], ['n', 'banana-2'], ['1', 'banana-2'], ['2', 'banana-2'], ['3', 'banana-2'], ['q', 'banana-2']] result = select(text, option) print(result)#by [ywbird.github.io] 인풋1select(text, option) 여기서 인풋은 텍스트와 옵션으로 나뉘여져있습니다. 텍스트텍스트는 리스트 형식으로 리스트 각 요소마다 한 줄이 됩니다. 1text = ['text 1', 'text 2', 'text 3'] 이렇게 설정하면 나오는 텍스트는 다음과 같다 123text 1text 2text 3 옵션옵션은 리스트 내부의 리스트 형식이다. 1option = [['y', 'text 1'], ['n', 'text 2']] 위와 같이 설정하면 다음과 같이 나온다. 123(y) text 1(n) text 2 리스트 내부의 리스트에서 첫 번째 요소는 키값(무조건 한글자!) 두 번째 요소는 표시 값이다. 이런 느낌? 옵션 부분을 딕셔너리를 이용할 수 있지만 함수 쓰고 귀찮아서.. ㅎ 해석12# pyselect.pyimport msvcrt 모듈 msvcrt 는 “MS VC++ 런타임의 유용한 루틴” 라고 합니다.이 프로젝트에서는 키보드 인풋을 받기위한 모듈이라고 생각하면 됩니다. 1234567891011121314def select(text, option): string = '' for x in text: string += f'{x}\\n' option_text = '' choice = '' for x in range(0, len(option)-1): option_text += f'\\n({option[x][0]}) {option[x][1]}\\n' choice += f'{option[x][0]}' input_text = f'\\nselect[{choice}]&gt; ' print('\\n'+string, option_text, input_text, end='') 이 부분은 텍스트와 옵션을 텍스트 형태로 변환시켜준후 프린트하는 부분입니다. 1234567891011while True: try: key = msvcrt.getch().decode() if key != '0': if key in list(choice): print(key) return key else: pass except: pass 이 부분은 키보드 인풋을 받는 부분이다.msvcrt 의 getch()함수를 통해서 인풋을 받는다.decode()함수를 이용해서 키보드 인풋을 이용해 텍스트로 변환한다.만약 변환한 글자가 option의 키보드 값중에 있을경우 그 값을 반환한다. 123456if __name__ == &quot;__main__&quot;: text = ['text 1', 'text 2', 'text 3'] option = [['y', 'banana-1'], ['n', 'banana-2'], ['1', 'banana-2'], ['2', 'banana-2'], ['3', 'banana-2'], ['q', 'banana-2']] result = select(text, option) print(result) 이 부분은 이 파일을 모듈로 사용하지 않을 경우에 실행하게 만든 부분.실행경우 미리보기에 나왔던 코드가 나온다. 모듈로 사용하기코드 맨 윗줄에 다음과 같은 코드로 임포트 하면 된다. 1import pyselect 그 후 사용할 때는 다음과 같이 사용할 수 있다. 1234text = ['text 1', 'text 2', 'text 3']option = [['y', 'banana-1'], ['n', 'banana-2'], ['1', 'banana-2'], ['2', 'banana-2'], ['3', 'banana-2'], ['q', 'banana-2']]ans = pyselect.select() 마무리이상으로 파이썬 선택 시스템 포스팅을 마치겠습니다.긴 글 읽어주셔서 감사합니다.","link":"/python/select/"},{"title":"파이썬 스티커","text":"파이썬으로 화면 스티커를 만들어 볼겁니다. 👁️미리보기 위왁 같이 이미지 또는 움직이는 이미지를 화면에 띄울 수 있고 🔨만들기필수 패키지: Python PyQt5 코드: sticker.py123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118119120121122123124125126127128129130131132133134135136137138139140141142143144145146147148149150151152153154import sysfrom PyQt5 import QtCore, QtWidgets, QtGuifrom PyQt5.QtGui import QMovieclass Sticker(QtWidgets.QMainWindow): def __init__(self, img_path, xy, size=1.0, on_top=False): super(Sticker, self).__init__() self.timer = QtCore.QTimer(self) self.img_path = img_path self.xy = xy self.from_xy = xy self.from_xy_diff = [0, 0] self.to_xy = xy self.to_xy_diff = [0, 0] self.speed = 60 self.direction = [0, 0] # x: 0(left), 1(right), y: 0(up), 1(down) self.size = size self.on_top = on_top self.localPos = None self.setupUi() self.show() # 마우스 놓았을 때 def mouseReleaseEvent(self, a0: QtGui.QMouseEvent) -&gt; None: if self.to_xy_diff == [0, 0] and self.from_xy_diff == [0, 0]: pass else: self.walk_diff(self.from_xy_diff, self.to_xy_diff, self.speed, restart=True) # 마우스 눌렀을 때 def mousePressEvent(self, a0: QtGui.QMouseEvent): self.localPos = a0.localPos() # 드래그 할 때 def mouseMoveEvent(self, a0: QtGui.QMouseEvent): self.timer.stop() self.xy = [(a0.globalX() - self.localPos.x()), (a0.globalY() - self.localPos.y())] self.move(*self.xy) # def walk(self, from_xy, to_xy, speed=60): # self.from_xy = from_xy # self.to_xy = to_xy # self.speed = speed # self.timer = QtCore.QTimer(self) # self.timer.timeout.connect(self.__walkHandler) # self.timer.start(1000 / self.speed) # 초기 위치로부터의 상대적 거리를 이용한 walk def walk_diff(self, from_xy_diff, to_xy_diff, speed=60, restart=False): self.from_xy_diff = from_xy_diff self.to_xy_diff = to_xy_diff self.from_xy = [self.xy[0] + self.from_xy_diff[0], self.xy[1] + self.from_xy_diff[1]] self.to_xy = [self.xy[0] + self.to_xy_diff[0], self.xy[1] + self.to_xy_diff[1]] self.speed = speed if restart: self.timer.start() else: self.timer.timeout.connect(self.__walkHandler) self.timer.start(1000 / self.speed) def __walkHandler(self): if self.xy[0] &gt;= self.to_xy[0]: self.direction[0] = 0 elif self.xy[0] &lt; self.from_xy[0]: self.direction[0] = 1 if self.direction[0] == 0: self.xy[0] -= 1 else: self.xy[0] += 1 if self.xy[1] &gt;= self.to_xy[1]: self.direction[1] = 0 elif self.xy[1] &lt; self.from_xy[1]: self.direction[1] = 1 if self.direction[1] == 0: self.xy[1] -= 1 else: self.xy[1] += 1 self.move(*self.xy) def setupUi(self): centralWidget = QtWidgets.QWidget(self) self.setCentralWidget(centralWidget) flags = QtCore.Qt.WindowFlags( QtCore.Qt.FramelessWindowHint | QtCore.Qt.WindowStaysOnTopHint if self.on_top else QtCore.Qt.FramelessWindowHint) self.setWindowFlags(flags) self.setAttribute(QtCore.Qt.WA_NoSystemBackground, True) self.setAttribute(QtCore.Qt.WA_TranslucentBackground, True) label = QtWidgets.QLabel(centralWidget) movie = QMovie(self.img_path) label.setMovie(movie) movie.start() movie.stop() w = int(movie.frameRect().size().width() * self.size) h = int(movie.frameRect().size().height() * self.size) movie.setScaledSize(QtCore.QSize(w, h)) movie.start() self.setGeometry(self.xy[0], self.xy[1], w, h) def mouseDoubleClickEvent(self, e): QtWidgets.qApp.quit()def distance(x, y): if x &gt;= y: result = x - y else: result = y - x return resultif __name__ == '__main__': app = QtWidgets.QApplication(sys.argv) msgbox = QtWidgets.QMessageBox() argument = sys.argv # s = Sticker('gif/azzazel.gif', xy=[80, 200], size=1.0, on_top=True) if len(argument) &gt;= 3: g = Sticker(argument[1], xy=list(map(int, argument[4].split(','))), size=float( argument[2]), on_top=bool(int(argument[3]))) else: QtWidgets.qApp.quit() sys.exit() try: frm = list(map(int, argument[5].split(','))) to = list(map(int, argument[6].split(','))) g.walk_diff(from_xy_diff=frm, to_xy_diff=to, speed=int(argument[7])) except: pass # gif/gura.gif 0.2 1 200,180 200,200 120 # to # g = Sticker('gif/gura.gif', xy=[200, 200], size=0.2, on_top=True) # g.walk_diff(from_xy_diff=[-100, 0], to_xy_diff=[100, 0], speed=180) sys.exit(app.exec_()) 위의 코드를 작성합니다. ❗혹시 실행파일(.exe)로 만들고 싶다면 Pyinstaller 를 쓰시면 됩니다! 만들기 끝! 🔥사용해보기코드가 있는 디렉토리에 터미널을 열어줍니다. 1&gt; sticker.py images/gura.gif 0.2 1 10,10 -100,0 100,0 120 ❗필수 설정 번째는 파일의 경로입니다. 번째는 이미지의 크기입니다. 이미지의 기본 크기가 1입니다. 너무 클때는 0.2 같이 소수로 쓰시면 됩니다. sticker.py뒤에서 3번째는 스티커가 항상 위에 있을지입니다. 0을 넣으면 평범한 윈도우처럼 작동합니다. 1을 넣으면 항상 위에 있게 설정합니다. 번째는 스티커의 기본 X, Y위치입니다.“,”로 구분합니다. (띄어쓰기가 없어야 합니다!) ✅선택 설정 번째는 스티커가 움직일때 기본 위치입니다. X, Y순서이고 절대 위치가 아닌 상대 위치입니다. 번째는 스티커가 움직일때 움직일 위치입니다. X, Y순서이고 절대 위치가 아닌 상대 위치입니다. 번째는 스티커가 움직일때 속도입니다. 120이 적당합니다.(120 생각보다 느려요.) 🖐️마무리이렇게 파이썬으로 스티커 만드는법을 알아보았습니다.이상으로 파이썬 스티커 포스팅을 마치겠습니다.","link":"/python/sticker/"},{"title":"파이썬 변수의 종류들","text":"간단한 목차 숫자 변수 문자열 변수 리스트 종류의 변수 거짓, 진실 변수 숫자 변수숫자 변수는 말그대로 숫자 변수이다. 123&gt;&gt;&gt; a = 1&gt;&gt;&gt; a1 처럼 수를 담을 수 있다. 자주 사용하지는 않지만 8진수 16진수 같은 것이 있다. 8진수를 만드려면 변수를 지정할때 0o로 시작하면 된다. 16진수를 만드려면 변수를 지정할때 0x로 시작하면 된다. 문자열 변수문자열 변수는 “바나나가 1개가 있다.” 처럼 문자열을 말한다. 문자열 포메팅 기능을 사용할 수 있다. 문자열 변수의 표현 방법''로 감싸기123&gt;&gt;&gt; a = 'One banana.'&gt;&gt;&gt; a'One banana.' 이처럼 문자열을 ''로 감쌀 수 있다. &quot;&quot;로 감싸기123&gt;&gt;&gt; a = &quot;One banana.&quot;&gt;&gt;&gt; a'One banana.' 이처럼 문자열을 &quot;&quot;로 감쌀 수 있다. 여러줄 만들기파이썬에서 문자열을 여러 줄로 만드는 데에는 여러 가지 방법이 있다. 12&gt;&gt;&gt; a = &quot;&quot;&quot;Wow!There's one banana!&quot;&quot;&quot; 이처럼 문자열을 &quot;&quot;&quot;[문자열]&quot;&quot;&quot; 또는 '''[문자열]'''로 둘러싸주면 여러 줄 표현이 가능하다. 1&gt;&gt;&gt; a = &quot;Wow!\\nThere's one banana!&quot; 이처럼 문자열 내에 이스케이프 코드를 넣어서 표현할 수 있다. 문자열 속에 &quot;와 '가 둘다 들어가있는 경우 “바나나가 1개가 있다.” 바나나가 말했다. 이처럼 문자열 속에 &quot;가 있는 경우에는 다음처럼 문자열을 '로 감싸서 해결 할 수 있다. 123&gt;&gt;&gt; a = '&quot;바나나가 1개가 있다.&quot; 바나나가 말했다.'&gt;&gt;&gt; a'&quot;바나나가 1개가 있다.&quot; 바나나가 말했다.' 문자열 속에 '가 있는 경우에도 전과 반대로 &quot;로 감싸서 해결할 수 있다. 하지만 만약 다음처럼 문자열 안에 &quot;와 '가 둘 다 들어간다면 어떨까? 그녀는 “그는 ‘그건 참 쉽지’라고 생각했다.”라고 말했어. 이스케이프 코드를 쓰면 된다.'또는 &quot; 자리에 \\' 또는 \\&quot;를 다음처럼 넣어주면 된다. 123&gt;&gt;&gt; a = '그녀는 \\&quot;그는 \\'그건 참 쉽지\\'라고 생각했다.\\&quot;라고 말했어.'&gt;&gt;&gt; a'그녀는 &quot;그는 \\'그건 참 쉽지\\'라고 생각했다.&quot;라고 말했어.' 리스트 종류의 변수리스트리스트 만들기리스트는 다음과 같이 만들 수 있다.값들을 대괄호 [] 안에 쉼표 ,로 감싸주면 된다. 123&gt;&gt;&gt; a = [1, 2, 3, 4]&gt;&gt;&gt; a[1, 2, 3, 4] 123456&gt;&gt;&gt; a = list() #빈 리스트를 생성함&gt;&gt;&gt; a()&gt;&gt;&gt; a = list('banana') #banana 문자열을 글자단위로 쪼개서 리스트로 만든다.&gt;&gt;&gt; a['b', 'a', 'n', 'a', 'n', 'a'] 인덱싱그리고 다음과 같이 리스트 값을 불러올 수 있다.이를 인덱싱 한다고 한다. 12345&gt;&gt;&gt; a = [1, 2, 3, 4]&gt;&gt;&gt; a[0]1&gt;&gt;&gt; a[2]3 ※이때 파이썬은 숫자를 0부터 샌다.따라서 0은 첫 번째, 1은 두 번째, … n은 n+1번째인 식으로 말이다. 슬라이싱123&gt;&gt;&gt; a = [1, 2, 3, 4, 5]&gt;&gt;&gt; a[1:3][2, 3] 이와같이 [1:3]은 리스트 값 1(=2)부터 리스트 값 3(=4) 전까지를 말한다. 12345&gt;&gt;&gt; a = [1, 2, 3, 4, 5]&gt;&gt;&gt; a[2:] #예 1[3, 4, 5]&gt;&gt;&gt; a[:3] #예 2[1, 2, 3] 예 1과같이 이와같이 [2:]는 리스트 값 2(=3)부터 리스트 끝까지를 말한다.예 2과같이 이와같이 [:3]는 리스트 값 3(=4)바로 앞(리스트 값 a[2])부터 리스트의 맨 처음까지를 말한다. 리스트 속의 리스트다음과 같이 리스트 속의 리스트를 포함시킬 수 있다. 또 값을 불러올 수도 있다 123&gt;&gt;&gt; a = [1, 2, 3, [5, 6, 7, 8]]&gt;&gt;&gt; a[3][2]7 리스트 값 바꾸기리스트 값도 바꿀 수 있다. 1234&gt;&gt;&gt; a = [1, 2, 3]&gt;&gt;&gt; a[2] = 4&gt;&gt;&gt; a[2]4 리스트 관련 함수는 여기서 확인 할 수 있다. 튜플튜플은 리스트와 거의 비슷하지만 리스트와는 달리 값을 바꿀 수 없고 바꾸기 위해서는 튜플을 재정의 해줘야 한다. 튜플은 다음과같이 만들 수 있다. 123&gt;&gt;&gt; a = (1, 2, 3)&gt;&gt;&gt; a(1, 2, 3) 123456&gt;&gt;&gt; a = tuple() #빈 튜플을 생성함&gt;&gt;&gt; a()&gt;&gt;&gt; a = tuple('banana') #banana 문자열을 글자단위로 쪼개서 튜플로 만든다.&gt;&gt;&gt; a('b', 'a', 'n', 'a', 'n', 'a') 그 외의 튜플 사용법은 삭제, 추가(값 변경)를 할 수 없다는 점을 제외하고는 인덱싱, 슬라이싱 같은 것은 리스트 사용법과 같다. 튜플 관련 함수는 여기서 확인 할 수 있다. 딕셔너리딕셔너리(dictionary) 타입은 말그대로 사전 이라는 뜻이다.딕셔너리는 {} 안에 key값 뒤에 :뒤에 value를 넣어주면 된다. 1234567&gt;&gt;&gt; a = dict()&gt;&gt;&gt; a{}&gt;&gt;&gt; a = {'1':'banana', '2':'one', '3':'love'}&gt;&gt;&gt; a{'1': 'banana', '2': 'one', '3': 'love'} 다음과 같이 값을 불러올 수 있다. 12345&gt;&gt;&gt; a = {'1':'banana', '2':'one', '3':'love'}&gt;&gt;&gt; a{'1': 'banana', '2': 'one', '3': 'love'}&gt;&gt;&gt; a['1'] #'1' 값에 해당하는 값을 도출'banana' ‘1’ 값에 ':'를 통해 ‘banana’를 대입 시킨 것 딕셔너리 관련 함수는 여기서 확인 할 수 있다. 거짓, 진실 변수거짓, 진실 변수는 말그대로 거짓, 진실을 다루는 변수 이다.이를 불(bool) 이라고 한다. True와 False로 이루어집니다.또는 True를 비어있지 않은 변수(문자열, 리스트, 튜플, 딕셔너리 등등)로 대체할 수 있습니다.또는 False를 비어있는 변수(문자열, 리스트, 튜플, 딕셔너리 등등)로 대체할 수 있습니다. 123456&gt;&gt;&gt; a = True&gt;&gt;&gt; aTrue&gt;&gt;&gt; b = False&gt;&gt;&gt; bFalse 이때 임의의 변수가 진실(True)인지 거짓(False)인지 확인하는 변수로 앞에서 말한 진실과 거짓을 대체하는 방법을 보겠습니다. 123456&gt;&gt;&gt; a = True&gt;&gt;&gt; bool(a)True&gt;&gt;&gt; a = False&gt;&gt;&gt; bool(a)False ※bool([변수])로 [변수]가 진실인지 거짓인지 알아낼 수 있다. 위의 함수를 이용해서 확인해 보면 파이썬 코드… 12345678910111213141516171819202122232425262728293031&gt;&gt;&gt; a = 'banana' #문자열&gt;&gt;&gt; bool(a)True&gt;&gt;&gt; a = ''&gt;&gt;&gt; bool(a)False&gt;&gt;&gt; a = [1, 2]&gt;&gt;&gt; bool(a)True&gt;&gt;&gt; a = []&gt;&gt;&gt; bool(a)False&gt;&gt;&gt; a = (1, 2)&gt;&gt;&gt; bool(a)True&gt;&gt;&gt; a = ()&gt;&gt;&gt; bool(a)False&gt;&gt;&gt; a = {'1':'banana', '2':'one'}&gt;&gt;&gt; bool(a)True&gt;&gt;&gt; a = {}&gt;&gt;&gt; bool(a)False 불 변수를 활용하는 대표적인 방법은 if 또는 while문이다. 1234a = 10 #참while a: #a가 `참` 인동안 반복 print('a') a -= 1 #a를 1씩 줄인다. 결과 12345678910aaaaaaaaaa 123a = 1 #참if a: print('true')else: print('false) 결과 1true 마무리이상으로 파이썬 변수의 종류들 포스팅을 마치겠습니다. 📌 이 포스팅은 박응용 님의 DOIT! 점프투 파이썬을 보고 배우고 만들었습니다. 비슷한 부분이 있을 수 있습니다.🎈 강의 링크","link":"/python/variable-types/"},{"title":"Cmd 자동 실행 파일 설정하기","text":"❗Cmd 자동 실행 파일 만들기 글을 모두 진행헀다고 가정한 후 진행하는 포스트입니다.🎈글 링크: Cmd 자동 실행 파일 만들기 미리보기 위와같이 프롬프트를 바꿀수도, 1&gt; clear 위와같은 명령어를 쳐서 터미널을 청소할 수도, 1&gt; ghdir 위같은 명령어를 쳐서 깃허브 폴더로 들어갈 수도 있습니다. 이렇게 사용할 수 있는 명령어들은 Cmd 카테고리에 차차 올라갈 예정입니다.앞서 몇 개만 맛보기로 보여드리자면 PROMT와 DOSKEY 가 있습니다. PROMPTCmd 기본 명령어로 PROMPT명령어가 있다.PROMPT 명령어는 아래 사진처럼 명령 프롬프트의 모양(?)을 바꿀 수 있다. 옵션1&gt; PROMPT /? 를 치면 옵션이 나오는데 표로 써보면 | 코드 | 값 | 코드 | 값 || :–: | :————————————- | :—-: | :———- | ————- || $A | &amp; 기호 | $L | &lt; 기호 || $B | | 기호 | $N | 현재 드라이브 || $C | ( 기호 | $P | 현재 위치 || $D | 날짜 | $Q | = 기호 || $E | escape 코드 | $S | (공백) || $F | ) 기호 | $T | 현재 시간 || $G | &gt; 기호 | $V | 윈도우 버전 || $H | backspace 코드(한글자를 지운다.) | $_ | 다음줄 || $$ | $ 기호 | $E는 ANSI escape code (code 27)[^1] 이라고 한다. 솔직히 어디 쓰는지 모르겠다. 자료를 뒤져봤지만 앞에서 설명한 데로 나올 뿐…마이크로소프트 공식 문서위키 피디아 - ANSI 이스케이프 코드 사용1PROMPT [텍스트] [텍스트]에 옵션을 잘 넣어주면 사진과 같이 사용할 수 있다. 예를 몇개 들자면 1&gt; PROMPT -$G$S 라고 쓰면 $G는 &gt;, $S는 (공백)이므로 아래처럼 된다. 1-&gt; [명령어] 위에 사진에 나온 것처럼 하기 위해서는 다음과 같은 코드가 필요하다. 1PROMPT [$P]$S$C$T$F$S$C$N$F$_~$$$S DOSKEYDOSKEY는 간단히 얘기하자면 단축어다.간단한 예를 들면 12345678&gt; DOSKEY banana=dir&gt; banana hello.txt banana.txt&lt;DIR&gt; test(원래는 출력이 조금 더 복잡하지만 다 쓰기 귀찮으니 이렇게만 쓴다;;) 위처럼 DOSKEY [이름]=[명령어]를 쓰면 [이름]에 [명령어]가 할당된다. 1&gt; DOSKEY banana=dir $1 위와 같이 쓰면 명령어로 banana 고구마를 쳤을 경우 $1위치에 고구마가 들어가게 된다.그렇게 되면 dir 고구마를 실행하게 되는 셈이다. 그 외에도 많은 옵션이 있지만 바이트 같은 어려운 개념이 들어있어 이번 포스트에서는 건너 뛰겠다.[^2][^2]: 사실 글쓴이도 이해하지 못했다… ❤ 대신 세세하게 설명돼어있는 블로그글 링크를 걸어두겠다.🎈 링크: 코드 클립핑 - DOSKEY 명령어 사용법 마무리이상으로 Cmd 자동 실행 파일 설정하기 포스팅을 마치겠습니다.","link":"/windows/auto-cmd-setup/"},{"title":"리눅스 cat 명령어 구현하기","text":"😻cat 명령어란?cat 명령어는 linux에서 지원하는 명령어이며, 명령어의 인자로 파일의 이름을 받아서 출력하는 명령어 입니다. hello.txt1Hello, World! banana.txt1Banana is yam. 123$ cat hello.txt banana.txtHello, World!Banana is yam. 🙀type 명령어의 문제점윈도우에는 기본적으로 type라는 명령어가 있습니다.type는 cat과 비슷하지만 cat은 파일이 여러개라도 항상 파일의 내용만 출력하는 반면 type는 인자가 2개 이상이면 파일의 이름도 같이 출력돼서 문제가 있습니다. hello.txt1Hello, World! banana.txt1Banana is yam. 123456789101112&gt; type hello.txt banana.txthello.txtHello, World!banana.txtBanana is yam. 이렇게 출력하죠 👍해결법먼저 doskey명령어를 이용해서 만들어보겠습니다. batch언어만을 이용하려고 했지만 인자가 여러개가 되면 리스트 객체를 이용해야 하고 C/C++언어를 이용하기는 VS를 깔기 귀찮아서 Python으로 구현했습니다 ㅎㅎ 🔎코드코드는 너무 짧아요 ㅎ cat.py1234import sysfor i in sys.argv[1:]: print(open(i).read(),end=&quot;&quot;) sys모듈로 인자를 받고 for문을 이용해서 출력하는 방식입니다. 🕶적용일종의 명령어이기 때문에 system32에 위치시키겠습니다. %windir%\\system32\\에 들어가 준 후 코드 파일(cat.py)를 이동 또는 복사합니다. init.cmd에 다음 줄을 추가해 주세요. 🤿init.cmd쓰는법은 아래 링크에!🎈Cmd 자동실행 파일 만들기 C:\\init.cmd1doskey cat=%windir%\\system32\\cat.py $* 🎞마무리이상으로 리눅스 cat 명령어 구현하기 포스팅을 마치겠습니다.","link":"/windows/cat/"},{"title":"Cmd 자동 실행 파일 만들기","text":"♟필요성이전 글인 🎈리눅스 cat 명령어 구현하기 글만 봐도 cmd를 실행할 때 파일을 여는 것은 필요해 보입니다.아니면 아래처럼 cmd의 시작 경로를 설정할 때도 쓰일 수 있죠. 1&gt; cd C:\\Users 또한 여태 제 글에 나오턴 아래와 같은 모습을 한 터미널 또한 자동 실행파일로 구현한 것입니다. 12[C:\\Users\\username] (12:00:00.00) (C)~$ (대충 이런느낌) 💎설치(?)터미널에 다음 명령어 2개를 실행시킵니다. 12reg add &quot;HKCU\\Software\\Microsoft\\Command Processor&quot; /v AutoRun ^ /t REG_EXPAND_SZ /d &quot;C:\\init.cmd&quot; /fecho @echo off &gt; C:\\init.cmd C: 드라이버로 가서 init.cmd를 열어줍니다.아래와 같이 적어주면 됩니다. C:\\init.cmd12345678910@echo off;명령어;다 지우기cls;기능 작동 확인 출력@echo on@echo Activate custom command.@echo off 이제 명령어를 ;명령어아래에 추가해주면 됩니다. 여기에 추가할 명령어는 다음글에서 다루도록 하겠습니다. 🎞마무리이상으로 Cmd 자동 실행 파일 만들기 포스팅을 마치겠습니다.","link":"/windows/cmd-auto-start/"},{"title":"파워쉘에 oh-my-posh 설정하기","text":"미리보기 Oh-My-Posh 공식 위키:https://ohmyposh.dev/ PowerShell 7 설치PowerShell 7이 설치되여있지 않다면 설치해 주세요. 1$ pwsh.exe 위 명령어를 cmd에 쳐봤을 때 오류가 뜬다면 설치되지 않은 것입니다. 설치 링크: Installing PowerShell on Windows MSI 설치를 추천합니다. -[x] Add ‘Run with PowerShell 7’ context menu for PowerShell files체크하면 .ps1파일을 우클릭 했을때 PowerShell 7으로 열 수 있는 옵션이 추가됩니다. 이제 cmd에서 아래 명령어를 쳤을 때 다음과 같이 나온다면 성공입니다. 또는 시작 메뉴에서 pwsh를 검색해서 아래와 같이 나오면 성공 Nerd 폰트 설치Nerd 폰트 사이트에 들어가 자신이 자주 쓰는 프로그래밍 폰트의 Nerd 폰트 버전을 받으면 됩니다.https://www.nerdfonts.com/font-downloads (저자는 현제 JetBrainsMono Nerd Font를 사용하고 있습니다.) Windows Terminal Preview 설치하기Microsoft Store 에 들어가서 windows terminal preview 를 검색하고 다운받습니다. Microsoft Store 링크:https://www.microsoft.com/en-us/p/windows-terminal-preview/9n8g5rfz9xk3 설정을 누릅니다. 기본 시작 쉘을 PowerShell 7로 바꿔줍니다. 기본 프로필을 누르고 Appearance를 누릅니다. 색 테마로 가장 무난한 Campbell을 선택합니다.(다른 테마를 다운받거나 불러올 수도 있습니다.)폰트를 아까 다운받은 Nerd폰트로 바꿔줍니다.(만약 보이지 않는다면 Show all fonts에 체크한 후 찾습니다.)마지막으로 Save를 눌러 저장한후 Windows Terminal Preview를 재시작 합니다. Oh-My-Posh 설치PowerShell 7을 실행한 후 다음 명령어롤 실행해 줍니다. 1Install-Module oh-my-posh -Scope CurrentUser &amp;#x1f480;만약 에러가 난다면 PowerShell 7을 관리자 권한으로 실행해 주세요. Posh-Git 설치Posh-Git은 Oh-My-Posh를 사용할 때 깃이 사용된 폴더에 들어가면 현재 깃의 상태를 알려주는 모듈이다. Posh-Git 깃헙 레포지토리:https://github.com/dahlbyk/posh-git 다음 명령어로 설치할 수 있다. 1PowerShellGet\\Install-Module posh-git -Scope CurrentUser -Force 이미지 출처: Posh-Git 깃헙 Terminal-Icons 설치Terminal-Icons은 PowerShell 용 아이콘 추가 모듈이다. dir명령어 같은 명령어를 쓰면 아이콘이 추가적으로 생긴다. Terminal-Icons 깃헙 레포지토리:https://github.com/devblackops/Terminal-Icons 다음 명령어로 설치할 수 있다. 1Install-Module -Name Terminal-Icons -Repository PSGallery 이미지 출처: Terminal-Icons 깃헙 PowerShell StartUp에 등록PowerShell 7창에 다음과 같이 칩니다. 1code $profile 내용을 다음과 같이 추가합니다. 1234Import-Module posh-gitImport-Module oh-my-poshImport-Module -Name Terminal-IconsSet-PoshPrompt -Theme bubblesline 여기서 Set-PoshPrompt -Theme [테마]로 테마를 고를 수 있는데 테마는 직접 만들 수도 있고 기본으로 있는 테마를 고를 수도 있습니다. Oh-My-Posh 테마 목록https://ohmyposh.dev/docs/themes ❓만약 자동 완성을 사용하고 싶다면 $profile에 1Set-PSReadLineOption -PredictionSource History 를 추가하시면 됩니다.","link":"/windows/oh-my-posh/"}],"tags":[{"name":"I_Wanna_Maker","slug":"I-Wanna-Maker","link":"/tags/I-Wanna-Maker/"},{"name":"toggle","slug":"toggle","link":"/tags/toggle/"},{"name":"IWM","slug":"IWM","link":"/tags/IWM/"},{"name":"CMD","slug":"CMD","link":"/tags/CMD/"},{"name":"theme","slug":"theme","link":"/tags/theme/"}],"categories":[{"name":"Lua","slug":"Lua","link":"/categories/Lua/"},{"name":"Blog","slug":"Blog","link":"/categories/Blog/"},{"name":"JavaScript","slug":"JavaScript","link":"/categories/JavaScript/"},{"name":"Design","slug":"Design","link":"/categories/Design/"},{"name":"I Wanna Maker","slug":"I-Wanna-Maker","link":"/categories/I-Wanna-Maker/"},{"name":"Pack","slug":"Pack","link":"/categories/Pack/"},{"name":"Python","slug":"Python","link":"/categories/Python/"},{"name":"Font","slug":"Design/Font","link":"/categories/Design/Font/"},{"name":"Windows","slug":"Windows","link":"/categories/Windows/"}],"pages":[{"title":"","text":"google-site-verification: googleaae84c6d74a65cd6.html","link":"/googleaae84c6d74a65cd6.html"},{"title":"","text":"naver-site-verification: naverdcb79c0aef28b9d3727769c03084aaf2.html","link":"/naverdcb79c0aef28b9d3727769c03084aaf2.html"},{"title":"About","text":"마인크래프트, 테라리아, 할로우 나이트 자주 플레이하는 고앵이 입니다.마인크래프트 리소스팩 만들고 배포합니다.(스타듀밸리 리소스팩도 배울예정)웹 개발 중심으로 코딩 공부하고 있습니다.React 배우고 있습니다. 파이썬 공부 기록 파이썬 만들기(?) 웹 공부 기록 마인크래프트 리소스팩 포스팅할 예정입니다.","link":"/about/index.html"},{"title":"Categories","text":"","link":"/categories/index.html"},{"title":"Search","text":"","link":"/search/index.html"}]}